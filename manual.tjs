/**
 * 擬似コードによるマニュアル
 */

/**
 * Window拡張
 */
class Window {
	/**
	 * ウィンドウの最大化
	 * 最大化ボタンを押した動作と同等
	 * サイズ固定ウィンドウでは機能しない
	 */
	function maximize();

	/**
	 * ウィンドウの最小化（mainWindowではタスクバー収納，それ以外は画面左下に最小化）
	 * 最小化ボタンを押した動作と同等
	 */
	function minimize();

	/**
	 * ウィンドウ最大化・最小化の復帰
	 */
	function showRestore();

	/**
	 * クライアント・ウィンドウ領域の取得
	 * @return %[ x, y, w, h ] または void(取得失敗時)
	 * ※ innerSunken枠分はクライアント領域に含まれるので注意
	 */
	function getClientRect();
	function getWindowRect();

	/**
	 * 拡張イベントを有効にする
	 * 拡張イベントとして以下が発生：
	 *  onMaximizeQuery  最大化許可確認
	 *  onMaximize       最大化
	 *  onMinimize       最小化（タスクバー収納時は除く）
	 *  onShow           ウィンドウ表示（タスクバーから復帰時）
	 *  onHide           ウィンドウ非表示（タスクバー収納時）
	 *  onMoveSizeBegin  リサイズ・移動開始
	 *  onMoveSizeEnd    リサイズ・移動終了
	 *  onMoving   ※    移動中
	 *  onMove     ※    移動
	 *  onResizing ※    リサイズ中
	 *   ※: この関数を実行した時点でインスタンスに存在しない場合には発生しない
	 */
	function registerExEvent();

	/**
	 * 拡張イベント：最大化を許可するかどうか確認
	 * @return true を返すと最大化を許可しない
	 */
	function onMaximizeQuery();

	/**
	 * 拡張イベント：ウィンドウ最大化
	 * 呼ばれた時点でウィンドウサイズは既に最大化されている
	 */
	function onMaximize();

	/**
	 * 拡張イベント：ウィンドウ最小化
	 * フルスクリーン中にAlt+Tabなどで別のアプリを選んだ場合や，mainWindow以外が最小化されたときに呼ばれる
	 * タスクバーに収納された場合は onHide イベントが呼ばれるので注意
	 */
	function onMinimize();

	/**
	 * 拡張イベント：ウィンドウ表示
	 * タスクバーから復帰したときなどに呼ばれる
	 */
	function onShow();

	/**
	 * 拡張イベント：ウィンドウ非表示
	 * タスクバーに収納された時などに呼ばれる
	 */
	function onHide();

	/**
	 * 拡張イベント：リサイズ・移動開始通知/終了
	 * フレームやタイトルバーをドラッグ開始した時やAlt+SpaceでSやMを選んだ時（開始通知），
	 * および移動やリサイズが終了した時（終了通知）にそれぞれ呼ばれる
	 * onMovingやonResizing中に元のウィンドウ位置やサイズを参照したい時はここで保存しておくとよい
	 * リサイズか移動かは WM_ENTERSIZEMOVE/WM_EXITSIZEMOVE の都合で判定不可
	 */
	function onMoveSizeBegin(); //< 開始通知
	function onMoveSizeEnd();   //< 終了通知

	/**
	 * 拡張イベント：ウィンドウ移動中
	 * @param rect %[ x, y, w, h ] ウィンドウ座標
	 * 
	 * ※Windowsでウィンドウ内容を表示したまま移動する設定（移動枠表示なし）の場合，すぐにonMoveが呼ばれる
	 */
	function onMoving(rect);

	/**
	 * 拡張イベント：ウィンドウ移動（完了）
	 * @param x,y クライアント領域左上のスクリーン座標
	 *            ※ innerSunken枠分はクライアント領域に含まれるので注意
	 */
	function onMove(x, y);

	/**
	 * 拡張イベント：サイズ変更中
	 * @param rect %[ x, y, w, h, type ] 変更中サイズ（ウィンドウ座標）
	 * @param rect.type ウィンドウのどこをつかんでサイズを変更しているか 1〜8
	 *                  +1:左側, +2:右側, +3:上側, +6:下側  の組み合わせ（3進数的表現）
	 *                         4 3 5
	 *                  配置： 1   3
	 *                         7 6 8
	 * @return true を返すと rect の変更を反映（位置・サイズを強制指定）
	 *         この場合，つかんだ位置(rect.type)に応じてうまく書き換え内容を調整しないと
	 *         サイズ変更中にウィンドウが動いてしまうことがあるので注意（⇒forceResizeRect()参照）
	 * 
	 * ※Windowsでウィンドウ内容を表示したままリサイズする設定（サイズ枠表示なし）の場合，すぐにonResizeが呼ばれる
	 */
	function onResizing(rect);

	/* 
	 * onResizingでサイズを固定させるサンプル（※これはプラグインで拡張される関数ではありません！）
	 * @param rect onResizingに渡された引数
	 * @param w, h 固定したいサイズ(voidなら変更しない)
	 * @return 変更されたらtrue
	  /
	function forceResizeRect(rect, w, h) {
		with (rect) {
			w = .w if (w === void);
			h = .h if (h === void);
			var x = (.type   % 3 == 1) ? (.x+.w) - w : .x;
			var y = (.type\3 % 3 == 1) ? (.y+.h) - h : .y;
			if (.x == x && .y == y && .w == w && .h == h) return false;
			.x = x;
			.y = y;
			.w = w;
			.h = h;
		}
		return true;
	}
	 */
}

/**
 * MenuItem拡張
 */
class MenuItem {
	/**
	 * メニューバーの右端分け表示
	 *  true ならその Item 以降は右端に寄せられる
	 * ※ Window.menu 直下で visible でない正しく動作しない
	 */
	property rightJustify { getter; setter };

	/**
	 * （チェックやラジオ以外の）アイコンの表示
	 * 設定内容は MenuItem.bi* 定数を使用する
	 * ※ Window.menu 子で visible でないと機能しないので注意
	 */
	property bmpItem { getter; setter };

	/// bmpItem 定数
	/* static */ var biSystem;					//< HBMMENU_SYSTEM
	/* static */ var biRestore;					//< HBMMENU_MBAR_RESTORE
	/* static */ var biMinimize;				//< HBMMENU_MBAR_MINIMIZE
	/* static */ var biClose;					//< HBMMENU_MBAR_CLOSE
	/* static */ var biCloseDisabled;			//< HBMMENU_MBAR_CLOSE_D
	/* static */ var biMinimizeDisabled;		//< HBMMENU_MBAR_MINIMIZE_D
	/* static */ var biPopupClose;				//< HBMMENU_POPUP_CLOSE
	/* static */ var biPopupRestore;			//< HBMMENU_POPUP_RESTORE
	/* static */ var biPopupMaximize;			//< HBMMENU_POPUP_MAXIMIZE
	/* static */ var biPopupMinimize;			//< HBMMENU_POPUP_MINIMIZE
}

/**
 * System拡張
 */
class System
{
	/**
	 * モニタの情報一覧を取得
	 * @param x,y,w,h 範囲枠指定。交わるモニタのみを返す。全省略で全てのモニタを返す。
	 * @return [ %[ name, primary, monitor:%[ x, y, w, h ], work:%[ x,y,w,h ], intersect:%[ x,y,w,h ] ], ... ];
	 *         name:      モニタの名前('\\.\DISPLAY?' 等)
	 *         primary:   プライマリモニタかどうか
	 *         monitor:   モニタの範囲辞書
	 *         work:      モニタのワークエリア範囲(ウィンドウを最大化したときなどの表示範囲)
	 *         intersect: 指定範囲と交わる領域(指定しなかった場合は monitor と同じ)
	 */
	function getDisplayMonitors();            //< 全てのモニタを列挙する
	function getDisplayMonitors(x, y, w, h);  //< 指定範囲に交わるモニタのみ列挙する

	/**
	 * モニタ情報を取得
	 * @param near     trueなら対象モニタが無かった場合に最も近いモニタの情報を返す
	 * @param x,y      座標指定
	 * @param x,y,w,h  範囲指定
	 * @param window   ウィンドウ指定（Window オブジェクトを渡す）
	 * @return %[ name, primary, monitor:%[ x, y, w, h ], work:%[ x, y, w, h ] ];
	 *         モニタの情報。辞書内容は getDisplayMonitors と同じ (ただし intersect 情報は無い)。
	 *         near=false 時でモニタが無い場合は void を返す。
	 */
	function getMonitorInfo();                 //< プライマリモニタを返す
	function getMonitorInfo(near, x, y);       //< 指定座標の位置のモニタを返す
	function getMonitorInfo(near, x, y, w, h); //< 指定座標の範囲にもっとも多く交わるモニタを返す
	function getMonitorInfo(near, window);     //< 指定ウィンドウの範囲にもっとも多く交わるモニタを返す
}
